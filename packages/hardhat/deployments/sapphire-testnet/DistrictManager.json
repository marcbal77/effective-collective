{
  "address": "0x55312480aF566416ce3F4d3a1AbD2B50000C17CA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "createTestProposals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "proposal",
              "type": "address"
            }
          ],
          "internalType": "struct DistrictManager.Vote[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ping",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f53ba76f2fbbaac5bf594bb3751625588902f1206cdb0c3d8dbf3dd061fe631",
  "receipt": {
    "to": null,
    "from": "0x142Ab00310aaCB3E27bf06c5cB9eEbf6116b0E51",
    "contractAddress": "0x55312480aF566416ce3F4d3a1AbD2B50000C17CA",
    "transactionIndex": 2,
    "gasUsed": "618167",
    "logsBloom": "0x
    "blockHash": "0xe11b1f30c09dda10e7682f486d5e5f6eebc8b7e29003593b44d57c84746dcbdc",
    "transactionHash": "0x6f53ba76f2fbbaac5bf594bb3751625588902f1206cdb0c3d8dbf3dd061fe631",
    "logs": [],
    "blockNumber": 5146672,
    "cumulativeGasUsed": "667906",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "9c47fac8ec1b9c14789ed0997643ffe0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"createTestProposals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"proposal\",\"type\":\"address\"}],\"internalType\":\"struct DistrictManager.Vote[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Proposol.sol\":\"DistrictManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Proposol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n// this is set up specifically for yes/no proposals\\n// Note: should we have the opportunity/time, it would make a lot of sense to have a parent Proposal contract and then other contract types\\n// that inherit from Proposal (they wouldnt be very different from one another, after all)\\ncontract Proposal {\\n    /* Following properties are variables that would be set by the Proposal Management contract (should we end up coding that) */\\n    // for the record, we could pass them into the constructor when deploying the contracts, as well, but saving effort for now\\n   \\n    // how many votes must be in favor for the vote to pass\\n    uint8 threshhold;\\n\\n    // times are done in uint form as number of seconds since 1-1-1970\\n    uint deadline;\\n\\n    /* Properties to track votes */\\n\\n    // the record of IF someone has voted. Not what their vote was (that, actually, does not need to even be recorded)\\n    mapping(address => bool) vote_record;\\n\\n    // for the yes/no type of vote, only two options: true (yes) or false (no)\\n    // other types of votes would likely need names to differentiate (or something else to pass to the callback?)\\n    mapping(bool => uint8) vote_count;\\n\\n    mapping(address=>bool) membership;\\n\\n    // https://ethereum.stackexchange.com/questions/43751/does-solidity-support-passing-an-array-of-strings-to-a-contracts-constructor-ye\\n    constructor(uint _deadline, uint8 _threshhold) {\\n        deadline = _deadline;\\n        threshhold = _threshhold;\\n        membership[0x142Ab00310aaCB3E27bf06c5cB9eEbf6116b0E51] = true;\\n    }\\n\\n    function recordVote (bool vote) external {\\n        //make sure the sender is allowed to vote\\n        require(membership[msg.sender]);\\n        \\n        //make sure the sender has not already voted\\n        require(!vote_record[msg.sender]);\\n\\n        //ensure deadline hasn't passed\\n        require(block.timestamp <= deadline);\\n\\n        //record the sender's vote\\n        vote_count[vote] = vote_count[vote] + 1;\\n\\n        //record that they have voted\\n        vote_record[msg.sender] = true;\\n\\n        // TODO: check threshhold and act?\\n    }\\n\\n    function hasVoted() external view returns (bool) {\\n        return vote_record[msg.sender];\\n    }\\n}\\n\\ncontract DistrictManager {\\n    struct Vote {\\n        string name;\\n        string description;\\n        address proposal;\\n    }\\n\\n    Vote[] votes;\\n\\n    uint8 member_count;\\n\\n    constructor() {\\n       // membership = MemberRecord(_membership);\\n       // member_count = membership.getCount();\\n\\n        // could make more\\n    }\\n\\n    function createTestProposals() external {\\n        createProposal(\\\"Change website color to blue\\\", \\n                       \\\"The background is awful; let's make it better\\\",\\n                       block.timestamp + 1209600,\\n                       0);\\n    }\\n\\n    function createProposal (string memory _name, string memory _description, uint _deadline, uint8 _threshhold) internal {\\n        uint8 threshhold = _threshhold == 0 ? member_count/2 : _threshhold;\\n\\n        Vote memory newVote;\\n        newVote.name = _name;\\n        newVote.description = _description;\\n        newVote.proposal = address(new Proposal(_deadline, threshhold));\\n        votes.push(newVote);\\n    } \\n\\n    function getVotes() external view returns (Vote[] memory){\\n        Vote[] memory votes_ = new Vote[](votes.length);\\n        for (uint8 i = 0; i < votes.length; i++) {\\n            Vote storage vote_ = votes[i];\\n            votes_[i] = vote_;\\n        }\\n      return votes_;\\n    }\\n\\n    function ping() external view returns (string memory) {\\n        return \\\"hello\\\";\\n    }\\n}\",\"keccak256\":\"0x22115f3d44d973837b9f08e1f73dd5e1b079903c4a0bb61c872580ea5a812ca4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610a28806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630dc96015146100465780635c36b18614610064578063c0f555df1461008b575b600080fd5b61004e610095565b60405161005b91906104a7565b60405180910390f35b604080518082018252600581526468656c6c6f60d81b6020820152905161005b9190610541565b6100936102bd565b005b600080546060919067ffffffffffffffff8111156100b5576100b561055b565b60405190808252806020026020018201604052801561010257816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816100d35790505b50905060005b60005460ff821610156102b7576000808260ff168154811061012c5761012c610571565b906000526020600020906003020190508060405180606001604052908160008201805461015890610587565b80601f016020809104026020016040519081016040528092919081815260200182805461018490610587565b80156101d15780601f106101a6576101008083540402835291602001916101d1565b820191906000526020600020905b8154815290600101906020018083116101b457829003601f168201915b505050505081526020016001820180546101ea90610587565b80601f016020809104026020016040519081016040528092919081815260200182805461021690610587565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b5050509183525050600291909101546001600160a01b03166020909101528351849060ff851690811061029857610298610571565b60200260200101819052505080806102af906105d1565b915050610108565b50919050565b6103236040518060400160405280601c81526020017f4368616e6765207765627369746520636f6c6f7220746f20626c7565000000008152506040518060600160405280602d81526020016109c6602d913961031c42621275006105f0565b6000610325565b565b600060ff8216156103365781610348565b6001546103489060029060ff16610609565b90506103776040518060600160405280606081526020016060815260200160006001600160a01b031681525090565b858152602081018590526040518490839061039190610454565b91825260ff166020820152604001604051809103906000f0801580156103bb573d6000803e3d6000fd5b506001600160a01b0316604082015260008054600181018255908052815182916003027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630190819061040d9082610688565b50602082015160018201906104229082610688565b5060409190910151600290910180546001600160a01b0319166001600160a01b03909216919091179055505050505050565b61027d8061074983390190565b6000815180845260005b818110156104875760208185018101518683018201520161046b565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561053357603f198984030185528151606081518186526104f482870182610461565b915050888201518582038a87015261050c8282610461565b928901516001600160a01b03169589019590955250948701949250908601906001016104ce565b509098975050505050505050565b6020815260006105546020830184610461565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061059b57607f821691505b6020821081036102b757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81036105e7576105e76105bb565b60010192915050565b80820180821115610603576106036105bb565b92915050565b600060ff83168061062a57634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b601f82111561068357600081815260208120601f850160051c810160208610156106605750805b601f850160051c820191505b8181101561067f5782815560010161066c565b5050505b505050565b815167ffffffffffffffff8111156106a2576106a261055b565b6106b6816106b08454610587565b84610639565b602080601f8311600181146106eb57600084156106d35750858301515b600019600386901b1c1916600185901b17855561067f565b600085815260208120601f198616915b8281101561071a578886015182559484019460019091019084016106fb565b50858210156107385787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe608060405234801561001057600080fd5b5060405161027d38038061027d83398101604081905261002f91610092565b60019182556000805460ff90921660ff1992831617815573142ab00310aacb3e27bf06c5cb9eebf6116b0e51905260046020527f9c12b7a735d4915ec402010057e5d17ea5eb28f0ea7aa3702b6cfaac55a4f71a805490911690911790556100c8565b600080604083850312156100a557600080fd5b82519150602083015160ff811681146100bd57600080fd5b809150509250929050565b6101a6806100d76000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063648213381461003b578063d64ee23814610062575b600080fd5b3360009081526002602052604090205460ff16604051901515815260200160405180910390f35b61007561007036600461011a565b610077565b005b3360009081526004602052604090205460ff1661009357600080fd5b3360009081526002602052604090205460ff16156100b057600080fd5b6001544211156100bf57600080fd5b8015156000908152600360205260409020546100df9060ff166001610143565b9015156000908152600360209081526040808320805460ff9590951660ff199586161790553383526002909152902080549091166001179055565b60006020828403121561012c57600080fd5b8135801515811461013c57600080fd5b9392505050565b60ff818116838216019081111561016a57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220ab722031879fb97070abf84b3aec96976d37e986a7ca1099dc2f17bb167ee97464736f6c63430008110033546865206261636b67726f756e6420697320617766756c3b206c65742773206d616b6520697420626574746572a2646970667358221220fd943afbc0f4d0ccf56b058d14fc0ebe4c923ac8db2ba47dd809415d819b57a464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c80630dc96015146100465780635c36b18614610064578063c0f555df1461008b575b600080fd5b61004e610095565b60405161005b91906104a7565b60405180910390f35b604080518082018252600581526468656c6c6f60d81b6020820152905161005b9190610541565b6100936102bd565b005b600080546060919067ffffffffffffffff8111156100b5576100b561055b565b60405190808252806020026020018201604052801561010257816020015b604080516060808201835280825260208201526000918101919091528152602001906001900390816100d35790505b50905060005b60005460ff821610156102b7576000808260ff168154811061012c5761012c610571565b906000526020600020906003020190508060405180606001604052908160008201805461015890610587565b80601f016020809104026020016040519081016040528092919081815260200182805461018490610587565b80156101d15780601f106101a6576101008083540402835291602001916101d1565b820191906000526020600020905b8154815290600101906020018083116101b457829003601f168201915b505050505081526020016001820180546101ea90610587565b80601f016020809104026020016040519081016040528092919081815260200182805461021690610587565b80156102635780601f1061023857610100808354040283529160200191610263565b820191906000526020600020905b81548152906001019060200180831161024657829003601f168201915b5050509183525050600291909101546001600160a01b03166020909101528351849060ff851690811061029857610298610571565b60200260200101819052505080806102af906105d1565b915050610108565b50919050565b6103236040518060400160405280601c81526020017f4368616e6765207765627369746520636f6c6f7220746f20626c7565000000008152506040518060600160405280602d81526020016109c6602d913961031c42621275006105f0565b6000610325565b565b600060ff8216156103365781610348565b6001546103489060029060ff16610609565b90506103776040518060600160405280606081526020016060815260200160006001600160a01b031681525090565b858152602081018590526040518490839061039190610454565b91825260ff166020820152604001604051809103906000f0801580156103bb573d6000803e3d6000fd5b506001600160a01b0316604082015260008054600181018255908052815182916003027f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630190819061040d9082610688565b50602082015160018201906104229082610688565b5060409190910151600290910180546001600160a01b0319166001600160a01b03909216919091179055505050505050565b61027d8061074983390190565b6000815180845260005b818110156104875760208185018101518683018201520161046b565b506000602082860101526020601f19601f83011685010191505092915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561053357603f198984030185528151606081518186526104f482870182610461565b915050888201518582038a87015261050c8282610461565b928901516001600160a01b03169589019590955250948701949250908601906001016104ce565b509098975050505050505050565b6020815260006105546020830184610461565b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b600181811c9082168061059b57607f821691505b6020821081036102b757634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff81036105e7576105e76105bb565b60010192915050565b80820180821115610603576106036105bb565b92915050565b600060ff83168061062a57634e487b7160e01b600052601260045260246000fd5b8060ff84160491505092915050565b601f82111561068357600081815260208120601f850160051c810160208610156106605750805b601f850160051c820191505b8181101561067f5782815560010161066c565b5050505b505050565b815167ffffffffffffffff8111156106a2576106a261055b565b6106b6816106b08454610587565b84610639565b602080601f8311600181146106eb57600084156106d35750858301515b600019600386901b1c1916600185901b17855561067f565b600085815260208120601f198616915b8281101561071a578886015182559484019460019091019084016106fb565b50858210156107385787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe608060405234801561001057600080fd5b5060405161027d38038061027d83398101604081905261002f91610092565b60019182556000805460ff90921660ff1992831617815573142ab00310aacb3e27bf06c5cb9eebf6116b0e51905260046020527f9c12b7a735d4915ec402010057e5d17ea5eb28f0ea7aa3702b6cfaac55a4f71a805490911690911790556100c8565b600080604083850312156100a557600080fd5b82519150602083015160ff811681146100bd57600080fd5b809150509250929050565b6101a6806100d76000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063648213381461003b578063d64ee23814610062575b600080fd5b3360009081526002602052604090205460ff16604051901515815260200160405180910390f35b61007561007036600461011a565b610077565b005b3360009081526004602052604090205460ff1661009357600080fd5b3360009081526002602052604090205460ff16156100b057600080fd5b6001544211156100bf57600080fd5b8015156000908152600360205260409020546100df9060ff166001610143565b9015156000908152600360209081526040808320805460ff9590951660ff199586161790553383526002909152902080549091166001179055565b60006020828403121561012c57600080fd5b8135801515811461013c57600080fd5b9392505050565b60ff818116838216019081111561016a57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220ab722031879fb97070abf84b3aec96976d37e986a7ca1099dc2f17bb167ee97464736f6c63430008110033546865206261636b67726f756e6420697320617766756c3b206c65742773206d616b6520697420626574746572a2646970667358221220fd943afbc0f4d0ccf56b058d14fc0ebe4c923ac8db2ba47dd809415d819b57a464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 107,
        "contract": "contracts/Proposol.sol:DistrictManager",
        "label": "votes",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_struct(Vote)103_storage)dyn_storage"
      },
      {
        "astId": 109,
        "contract": "contracts/Proposol.sol:DistrictManager",
        "label": "member_count",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Vote)103_storage)dyn_storage": {
        "base": "t_struct(Vote)103_storage",
        "encoding": "dynamic_array",
        "label": "struct DistrictManager.Vote[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Vote)103_storage": {
        "encoding": "inplace",
        "label": "struct DistrictManager.Vote",
        "members": [
          {
            "astId": 98,
            "contract": "contracts/Proposol.sol:DistrictManager",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 100,
            "contract": "contracts/Proposol.sol:DistrictManager",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 102,
            "contract": "contracts/Proposol.sol:DistrictManager",
            "label": "proposal",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}